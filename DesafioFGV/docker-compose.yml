services:

  redis:
    image: "redis:alpine"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - /dados/redis:/data
      - /dados/redis/logs:/logs
    networks:
      - desafio-network
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1GB"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    container_name: setup
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - desafio-network
    command:
      - bash
      - -c
      - |
        echo "Waiting for Elasticsearch availability";
        until curl -s http://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
    container_name: elasticsearch
    volumes:
      - /dados/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - desafio-network
    ports:
      - 9200:9200
    restart: unless-stopped
    dns:
      - 8.8.8.8
      - 8.8.4.4
    environment:
      - discovery.type=single-node
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.http.ssl.enabled=false

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.1
    container_name: kibana
    ports:
      - 5601:5601
    networks:
      - desafio-network
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - TELEMETRY_ENABLED=false
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=MinhaChaveDe32CaracteresNoMinimo!!!!

  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.1
    container_name: logstash
    command:
      - /bin/bash
      - -c
      - |
        echo "Waiting for Elasticsearch availability";
        until curl -s http://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 1; done;
        echo "Starting logstash";
        /usr/share/logstash/bin/logstash -f /usr/share/logstash/pipeline/logstash.conf
    networks:
      - desafio-network
    ports:
      - 5044:5044
      - 5045:5045
      - 5046:5046
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=http://elasticsearch:9200
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - /dados/logstash/logs:/usr/share/logstash/logs
      - /dados/logstash/data:/usr/share/logstash/data
    depends_on:
      - elasticsearch

  sqlserver:
    image: "mcr.microsoft.com/mssql/server:2019-latest"
    container_name: sqlserver
    ports:
      - "1433:1433"
    volumes:
      - /dados/sqlserver/data:/var/opt/mssql/data
      - /dados/sqlserver/log:/var/opt/mssql/log
    networks:
      - desafio-network
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${MSSQL_SA_PASSWORD}
      - MSSQL_PID=Developer
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: "10GB"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: [
        "CMD-SHELL",
        "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P ${MSSQL_SA_PASSWORD} -Q 'SELECT 1' || exit 1"
      ]
      interval: 30s
      timeout: 10s
      retries: 5

  api:
    build:
      context: .
      dockerfile: DesafioFGV.API/Dockerfile
      args:
        BUILD_CONFIGURATION: Release
    container_name: desafio-api
    ports:
      - "8080:8080"
      - "8081:8081"
    networks:
      - desafio-network
    depends_on:
      - sqlserver
      - redis
      - elasticsearch
    restart: unless-stopped
    environment:
      DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: false
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      ConnectionStrings__DefaultConnection: "Server=sqlserver,1433;Database=desafio;User ID=sa;Password=Dsv@123@123;Trusted_Connection=False; TrustServerCertificate=True;"
      AppSettings__Secret: "MXFhejJ3c3gzZWRjZHdkd3dxZnFlZ3JoanlrdWlsbw=="
      AppSettings__ExpirationHours: 24
      AppSettings__Issuer: "Desafio"
      AppSettings__ValidOn: "https://localhost:8080"
      Redis__ConnectionString: "redis:6379,password=dsv@123"
      Redis__InstanceName: "Desafio_"
      ElasticSettings__Uri: "http://elasticsearch:9200"
      ElasticSettings__Username: "elastic"
      ElasticSettings__Password: "dsv@123"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2GB"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  desafio-network:
    external: true
